// Code generated by MockGen. DO NOT EDIT.
// Source: volume.go
//
// Generated by this command:
//
//	mockgen -source=volume.go -package=repository -destination=../../../../../test/mock/domain/repository/volume.go
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/atsumarukun/holos-storage-api/internal/app/api/domain/entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockVolumeRepository is a mock of VolumeRepository interface.
type MockVolumeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeRepositoryMockRecorder
	isgomock struct{}
}

// MockVolumeRepositoryMockRecorder is the mock recorder for MockVolumeRepository.
type MockVolumeRepositoryMockRecorder struct {
	mock *MockVolumeRepository
}

// NewMockVolumeRepository creates a new mock instance.
func NewMockVolumeRepository(ctrl *gomock.Controller) *MockVolumeRepository {
	mock := &MockVolumeRepository{ctrl: ctrl}
	mock.recorder = &MockVolumeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeRepository) EXPECT() *MockVolumeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVolumeRepository) Create(arg0 context.Context, arg1 *entity.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVolumeRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVolumeRepository)(nil).Create), arg0, arg1)
}

// FindOneByIDAndAccountID mocks base method.
func (m *MockVolumeRepository) FindOneByIDAndAccountID(arg0 context.Context, arg1, arg2 uuid.UUID) (*entity.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByIDAndAccountID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByIDAndAccountID indicates an expected call of FindOneByIDAndAccountID.
func (mr *MockVolumeRepositoryMockRecorder) FindOneByIDAndAccountID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByIDAndAccountID", reflect.TypeOf((*MockVolumeRepository)(nil).FindOneByIDAndAccountID), arg0, arg1, arg2)
}

// FindOneByNameAndAccountID mocks base method.
func (m *MockVolumeRepository) FindOneByNameAndAccountID(arg0 context.Context, arg1 string, arg2 uuid.UUID) (*entity.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByNameAndAccountID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByNameAndAccountID indicates an expected call of FindOneByNameAndAccountID.
func (mr *MockVolumeRepositoryMockRecorder) FindOneByNameAndAccountID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByNameAndAccountID", reflect.TypeOf((*MockVolumeRepository)(nil).FindOneByNameAndAccountID), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockVolumeRepository) Update(arg0 context.Context, arg1 *entity.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVolumeRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVolumeRepository)(nil).Update), arg0, arg1)
}

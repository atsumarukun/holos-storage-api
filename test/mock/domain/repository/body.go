// Code generated by MockGen. DO NOT EDIT.
// Source: body.go
//
// Generated by this command:
//
//	mockgen -source=body.go -package=repository -destination=../../../../../test/mock/domain/repository/body.go
//

// Package repository is a generated GoMock package.
package repository

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBodyRepository is a mock of BodyRepository interface.
type MockBodyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBodyRepositoryMockRecorder
	isgomock struct{}
}

// MockBodyRepositoryMockRecorder is the mock recorder for MockBodyRepository.
type MockBodyRepositoryMockRecorder struct {
	mock *MockBodyRepository
}

// NewMockBodyRepository creates a new mock instance.
func NewMockBodyRepository(ctrl *gomock.Controller) *MockBodyRepository {
	mock := &MockBodyRepository{ctrl: ctrl}
	mock.recorder = &MockBodyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBodyRepository) EXPECT() *MockBodyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBodyRepository) Create(arg0 string, arg1 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBodyRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBodyRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockBodyRepository) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBodyRepositoryMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBodyRepository)(nil).Delete), arg0)
}

// FindOneByPath mocks base method.
func (m *MockBodyRepository) FindOneByPath(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByPath", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByPath indicates an expected call of FindOneByPath.
func (mr *MockBodyRepositoryMockRecorder) FindOneByPath(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByPath", reflect.TypeOf((*MockBodyRepository)(nil).FindOneByPath), arg0)
}

// Update mocks base method.
func (m *MockBodyRepository) Update(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBodyRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBodyRepository)(nil).Update), arg0, arg1)
}

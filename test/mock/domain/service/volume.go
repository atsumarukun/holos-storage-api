// Code generated by MockGen. DO NOT EDIT.
// Source: volume.go
//
// Generated by this command:
//
//	mockgen -source=volume.go -package=service -destination=../../../../../test/mock/domain/service/volume.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	entity "github.com/atsumarukun/holos-storage-api/internal/app/api/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockVolumeService is a mock of VolumeService interface.
type MockVolumeService struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeServiceMockRecorder
	isgomock struct{}
}

// MockVolumeServiceMockRecorder is the mock recorder for MockVolumeService.
type MockVolumeServiceMockRecorder struct {
	mock *MockVolumeService
}

// NewMockVolumeService creates a new mock instance.
func NewMockVolumeService(ctrl *gomock.Controller) *MockVolumeService {
	mock := &MockVolumeService{ctrl: ctrl}
	mock.recorder = &MockVolumeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeService) EXPECT() *MockVolumeServiceMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockVolumeService) Exists(arg0 context.Context, arg1 *entity.Volume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockVolumeServiceMockRecorder) Exists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockVolumeService)(nil).Exists), arg0, arg1)
}

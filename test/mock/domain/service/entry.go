// Code generated by MockGen. DO NOT EDIT.
// Source: entry.go
//
// Generated by this command:
//
//	mockgen -source=entry.go -package=service -destination=../../../../../test/mock/domain/service/entry.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	entity "github.com/atsumarukun/holos-storage-api/internal/app/api/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockEntryService is a mock of EntryService interface.
type MockEntryService struct {
	ctrl     *gomock.Controller
	recorder *MockEntryServiceMockRecorder
	isgomock struct{}
}

// MockEntryServiceMockRecorder is the mock recorder for MockEntryService.
type MockEntryServiceMockRecorder struct {
	mock *MockEntryService
}

// NewMockEntryService creates a new mock instance.
func NewMockEntryService(ctrl *gomock.Controller) *MockEntryService {
	mock := &MockEntryService{ctrl: ctrl}
	mock.recorder = &MockEntryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryService) EXPECT() *MockEntryServiceMockRecorder {
	return m.recorder
}

// CreateAncestors mocks base method.
func (m *MockEntryService) CreateAncestors(arg0 context.Context, arg1 *entity.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAncestors", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAncestors indicates an expected call of CreateAncestors.
func (mr *MockEntryServiceMockRecorder) CreateAncestors(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAncestors", reflect.TypeOf((*MockEntryService)(nil).CreateAncestors), arg0, arg1)
}

// DeleteDescendants mocks base method.
func (m *MockEntryService) DeleteDescendants(arg0 context.Context, arg1 *entity.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDescendants", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDescendants indicates an expected call of DeleteDescendants.
func (mr *MockEntryServiceMockRecorder) DeleteDescendants(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDescendants", reflect.TypeOf((*MockEntryService)(nil).DeleteDescendants), arg0, arg1)
}

// Exists mocks base method.
func (m *MockEntryService) Exists(arg0 context.Context, arg1 *entity.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockEntryServiceMockRecorder) Exists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockEntryService)(nil).Exists), arg0, arg1)
}

// UpdateDescendants mocks base method.
func (m *MockEntryService) UpdateDescendants(arg0 context.Context, arg1 *entity.Entry, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDescendants", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDescendants indicates an expected call of UpdateDescendants.
func (mr *MockEntryServiceMockRecorder) UpdateDescendants(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDescendants", reflect.TypeOf((*MockEntryService)(nil).UpdateDescendants), arg0, arg1, arg2)
}

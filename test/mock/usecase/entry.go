// Code generated by MockGen. DO NOT EDIT.
// Source: entry.go
//
// Generated by this command:
//
//	mockgen -source=entry.go -package=usecase -destination=../../../../test/mock/usecase/entry.go
//

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	io "io"
	reflect "reflect"

	dto "github.com/atsumarukun/holos-storage-api/internal/app/api/usecase/dto"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockEntryUsecase is a mock of EntryUsecase interface.
type MockEntryUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEntryUsecaseMockRecorder
	isgomock struct{}
}

// MockEntryUsecaseMockRecorder is the mock recorder for MockEntryUsecase.
type MockEntryUsecaseMockRecorder struct {
	mock *MockEntryUsecase
}

// NewMockEntryUsecase creates a new mock instance.
func NewMockEntryUsecase(ctrl *gomock.Controller) *MockEntryUsecase {
	mock := &MockEntryUsecase{ctrl: ctrl}
	mock.recorder = &MockEntryUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryUsecase) EXPECT() *MockEntryUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEntryUsecase) Create(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 string, arg4 uint64, arg5 io.Reader) (*dto.EntryDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*dto.EntryDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEntryUsecaseMockRecorder) Create(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEntryUsecase)(nil).Create), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Delete mocks base method.
func (m *MockEntryUsecase) Delete(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEntryUsecaseMockRecorder) Delete(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEntryUsecase)(nil).Delete), arg0, arg1, arg2, arg3)
}

// GetMeta mocks base method.
func (m *MockEntryUsecase) GetMeta(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 string) (*dto.EntryDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*dto.EntryDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockEntryUsecaseMockRecorder) GetMeta(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockEntryUsecase)(nil).GetMeta), arg0, arg1, arg2, arg3)
}

// GetOne mocks base method.
func (m *MockEntryUsecase) GetOne(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 string) (*dto.EntryDTO, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*dto.EntryDTO)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOne indicates an expected call of GetOne.
func (mr *MockEntryUsecaseMockRecorder) GetOne(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockEntryUsecase)(nil).GetOne), arg0, arg1, arg2, arg3)
}

// Search mocks base method.
func (m *MockEntryUsecase) Search(arg0 context.Context, arg1 uuid.UUID, arg2 string, arg3 *string, arg4 *uint64) ([]*dto.EntryDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*dto.EntryDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockEntryUsecaseMockRecorder) Search(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockEntryUsecase)(nil).Search), arg0, arg1, arg2, arg3, arg4)
}

// Update mocks base method.
func (m *MockEntryUsecase) Update(arg0 context.Context, arg1 uuid.UUID, arg2, arg3, arg4 string) (*dto.EntryDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*dto.EntryDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEntryUsecaseMockRecorder) Update(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEntryUsecase)(nil).Update), arg0, arg1, arg2, arg3, arg4)
}
